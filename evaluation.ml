(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
open CS51Utils ;;
open Absbook ;;

(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env);;

    let lookup (env : env) (varname : varid) : value =
      !(List.assoc varname env)

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: List.remove_assoc varname env

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val expr -> exp_to_concrete_string expr
      | Closure (expr, env) -> if printenvp 
        then "[" ^ exp_to_concrete_string expr ^ " |-- " ^ env_to_string env ^ "]"
        else exp_to_concrete_string expr

    and env_to_string (env : env) : string =
    "{" ^
      let rec env_to_string' (env' : env) : string =
        if env' == [] then "}"
        else let varname, loc = List.hd env' in 
          match !loc with
          | Val expr -> varname ^ " |--> " ^ exp_to_concrete_string expr ^ 
                        if List.tl env' == [] then "" else ", "
          | Closure (expr, env2) -> "[{" ^ env_to_string' env2 ^  " |-- " ^ 
            exp_to_concrete_string expr ^ "]" ^ 
            if List.tl env2 == [] then "}" else ", " ^ 
            env_to_string' (List.tl env') in  
      env_to_string' env

  end

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
let unop_eval (u : unop) (e : expr) : expr = 
  match u, e with
  | Negate, Num n -> Num (~-n)
  | _, _ -> raise (EvalError "Negate works with ints only.") ;; 

let binop_eval (b : binop) (e1 : expr) (e2 : expr) : expr = 
  match b, e1, e2 with
  | Plus, Num n1, Num n2 -> Num (n1 + n2)
  | Plus, _ , _ -> raise (EvalError "Arguments must be integers")
  | Minus, Num n1, Num n2 -> Num (n1 - n2)
  | Minus, _ , _ -> raise (EvalError "Arguments must be integers")
  | Times, Num n1, Num n2 -> Num (n1 * n2)
  | Times, _ , _ -> raise (EvalError "Arguments must be integers")
  | Over, Num n1, Num n2 -> Num (n1 / n2)
  | Over, _ , _ -> raise (EvalError "Arguments must be integers")
  | PlusFloat, Float n1, Float n2 -> Float (n1 +. n2)
  | PlusFloat, _ , _ -> raise (EvalError "Arguments must be floats")
  | MinusFloat, Float n1, Float n2 -> Float (n1 -. n2)
  | MinusFloat, _ , _ -> raise (EvalError "Arguments must be floats")
  | TimesFloat, Float n1, Float n2 -> Float (n1 *. n2)
  | TimesFloat, _ , _ -> raise (EvalError "Arguments must be floats")
  | OverFloat, Float n1, Float n2 -> Float (n1 /. n2)
  | OverFloat, _ , _ -> raise (EvalError "Arguments must be floats")
  | Equals, Num n1, Num n2 -> Bool (n1 = n2)
  | Equals, Bool n1, Bool n2 -> Bool (n1 = n2)
  | Equals, Float n1, Float n2 -> Bool (n1 = n2)
  | Equals, _ , _ -> raise (EvalError "Arguments must be integers, floats or booleans")
  | DNE, Num n1, Num n2 -> Bool (n1 = n2)
  | DNE, Bool n1, Bool n2 -> Bool (n1 = n2)
  | DNE, Float n1, Float n2 -> Bool (n1 = n2)
  | DNE, _ , _ -> raise (EvalError "Arguments must be integers, floats or booleans")
  | LessThan, Num n1, Num n2 -> Bool (n1 < n2)
  | LessThan, Float n1, Float n2 -> Bool (n1 < n2)
  | LessThan, _ , _ -> raise (EvalError "Arguments must be integers or floats")
  | GreaterThan, Num n1, Num n2 -> Bool (n1 < n2)
  | GreaterThan, Float n1, Float n2 -> Bool (n1 < n2)
  | GreaterThan, _ , _ -> raise (EvalError "Arguments must be integers or floats") ;;

let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval_s' (e : expr) : expr = 
    match e with 
    | Var var -> raise (EvalError ("Unbound variable " ^ var))
    | Num _ | Bool _ | Fun _ | Float _ -> e 
    | Unop (u, e) -> eval_s' (unop_eval u (eval_s' e))
    | Binop (b, e1, e2) -> eval_s' (binop_eval b (eval_s' e1) (eval_s' e2))
    | Conditional (e1, e2, e3) -> 
          (match eval_s' e1 with
            | Bool x -> if x then eval_s' e2 else eval_s' e3
            | _ -> raise (EvalError "Argument must be boolean"))
    | Let (var, e1, e2) -> eval_s' (subst var (eval_s' e1) e2)
    | Letrec (var, e1, e2) -> 
      eval_s' (subst var (subst var (Letrec (var, e1, Var (var))) (eval_s' e1)) e2)
    | App (e1, e2) -> (match eval_s' e1 with
                      | Fun (var, e) -> eval_s' (subst var (eval_s' e2) e)
                      | _ -> raise (EvalError "A non-function expression was provided"))
    | Raise -> raise (EvalException)
    | Unassigned -> raise (EvalError "Unassigned evaluation") in Env.Val (eval_s' exp);;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let unop_eval_d (u : unop) (Env.Val e : Env.value) : Env.value =
  match u with
  | Negate -> (match e with
              | Num n -> Env.Val(Num(~-n))
              | _ -> raise (EvalError ("`Negate` works with ints only. " ^ 
              "For float negation use `NegateFloat`. " ^ 
              "For bool negation use `Not`.")))
  | NegateFloat -> (match e with 
              | Float f -> Env.Val(Float(~-.f))
              | _ -> raise (EvalError ("`NegateFloat` works with floats only. " ^ 
              "For int negation use `Negate`. " ^ 
              "For bool negation use `Not`.")))
  | Not -> (match e with 
            | Bool b -> Env.Val(Bool(not b))
            | _ -> raise (EvalError ("`NegateFloat` works with floats only. " ^ 
            "For int negation use `Negate`. " ^ 
            "For bool negation use `Not`.")));; 

let binop_eval_d (b : binop) (Env.Val e1 : Env.value) (Env.Val e2 : Env.value) 
                                                    : Env.value = 
  match e1, e2 with 
    | Num n1, Num n2 -> (match b with
                        | Plus -> Env.Val(Num (n1 + n2))
                        | Minus -> Env.Val(Num (n1 - n2))
                        | Times -> Env.Val(Num (n1 * n2))
                        | Over -> Env.Val(Num (n1 / n2))
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | LessThan -> Env.Val(Bool (n1 < n2))
                        | GreaterThan -> Env.Val(Bool (n1 > n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for int")))
    | Float n1, Float n2 -> (match b with
                        | PlusFloat -> Env.Val(Float (n1 +. n2))
                        | MinusFloat -> Env.Val(Float (n1 -. n2))
                        | TimesFloat -> Env.Val(Float (n1 *. n2))
                        | OverFloat -> Env.Val(Float (n1 /. n2))
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | LessThan -> Env.Val(Bool (n1 < n2))
                        | GreaterThan -> Env.Val(Bool (n1 > n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for float")))
    | Bool n1, Bool n2 -> (match b with
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for bool")))
    | _ -> raise (EvalError ("invalid operator"));;
  
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
    match exp with
    | Var var -> Env.lookup env var
    | Num _ | Bool _ | Fun _ | Float _ -> Env.Val(exp)
    | Unop (u, e') -> unop_eval_d u (eval_d e' env)
    | Binop (b, e1, e2) -> binop_eval_d b (eval_d e1 env) (eval_d e2 env)
    | Conditional (e1, e2, e3) -> let Env.Val e' = eval_d e1 env in 
      (match e' with
        | Bool x -> if x then eval_d e2 env else eval_d e3 env
        | _ -> raise (EvalError "Argument must be boolean"))
    | Let (var, e1, e2) -> eval_d e2 (Env.extend env var (ref (eval_d e1 env)))
    | Letrec (var, e1, e2) ->
        let new_env = Env.extend env var (ref (Env.Val(Unassigned))) in
        let new_definition = eval_d e1 new_env in
        let env_extend = Env.extend new_env var (ref new_definition) in
        eval_d e2 env_extend
    | App (e1, e2) -> let Env.Val (e) = eval_d e1 env in 
                      (match e with
                      | Fun (var, e') -> eval_d e' (Env.extend env var (ref (eval_d e2 env)))
                      | _ -> raise (EvalError "A non-function expression was provided"))
    | Raise -> raise EvalException
    | Unassigned -> raise (EvalError "Unassigned evaluation");;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

type scope = 
  | Dynamic
  | Lexical
;;

let unop_eval_composite (u : unop) (v : Env.value) : Env.value =
  match v with 
  | Env.Closure _ -> raise (EvalError ("Closure error."))
  | Env.Val e -> (match u with
  | Negate -> (match e with
              | Num n -> Env.Val(Num(~-n))
              | _ -> raise (EvalError ("`Negate` works with ints only. " ^ 
              "For float negation use `NegateFloat`. " ^ 
              "For bool negation use `Not`.")))
  | NegateFloat -> (match e with 
              | Float f -> Env.Val(Float(~-.f))
              | _ -> raise (EvalError ("`NegateFloat` works with floats only. " ^ 
              "For int negation use `Negate`. " ^ 
              "For bool negation use `Not`.")))
  | Not -> (match e with 
            | Bool b -> Env.Val(Bool(not b))
            | _ -> raise (EvalError ("`NegateFloat` works with floats only. " ^ 
            "For int negation use `Negate`. " ^ 
            "For bool negation use `Not`."))))

let binop_eval_composite (b : binop) (v1 : Env.value) (v2 : Env.value) 
                                                                : Env.value = 
  match v1, v2 with 
  | Env.Val e1, Env.Val e2 ->
    (match e1, e2 with 
    | Num n1, Num n2 -> (match b with
                        | Plus -> Env.Val(Num (n1 + n2))
                        | Minus -> Env.Val(Num (n1 - n2))
                        | Times -> Env.Val(Num (n1 * n2))
                        | Over -> Env.Val(Num (n1 / n2))
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | LessThan -> Env.Val(Bool (n1 < n2))
                        | GreaterThan -> Env.Val(Bool (n1 > n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for int")))
    | Float n1, Float n2 -> (match b with
                        | PlusFloat -> Env.Val(Float (n1 +. n2))
                        | MinusFloat -> Env.Val(Float (n1 -. n2))
                        | TimesFloat -> Env.Val(Float (n1 *. n2))
                        | OverFloat -> Env.Val(Float (n1 /. n2))
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | LessThan -> Env.Val(Bool (n1 < n2))
                        | GreaterThan -> Env.Val(Bool (n1 > n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for float")))
    | Bool n1, Bool n2 -> (match b with
                        | Equals -> Env.Val(Bool (n1 = n2))
                        | DNE -> Env.Val(Bool (n1 != n2))
                        | _ -> raise (EvalError ("invalid operator for bool")))
    | _ -> raise (EvalError ("invalid operator")))
  | _, _ -> raise (EvalError "Value error: values passed are not of type Env.Val.")
;;

let eval_e (exp : expr) (env : Env.env) (scope : scope) : Env.value = 
  let value_to_expression (Env.Val e : Env.value) : expr = e in 
  let rec eval' (exp : expr) (env : Env.env) =
    match exp with
    | Var var -> (match Env.lookup env var with 
                  | Env.Val e -> eval' e env
                  | Env.Closure (e, env') -> 
                    (match scope with 
                    | Dynamic -> raise (EvalError "Wrong value type for ^ 
                                                  dynamic environment.")
                    | Lexical -> eval' e env'))
    | Num _ | Float _ | Bool _ -> Env.Val(exp)      
    | Unop (u, e) -> eval' (value_to_expression 
                            (unop_eval_composite u (eval' e env))) env
    | Binop (b, e1, e2) -> eval' (value_to_expression (binop_eval_composite b 
                                  (eval' e1 env) (eval' e2 env))) env
    | Conditional (e1, e2, e3) -> let Env.Val e' = eval' e1 env in 
      (match e' with
        | Bool x -> if x then eval' e2 env else eval' e3 env
        | _ -> raise (EvalError "Argument must be boolean"))
    | Fun _ -> (match scope with 
                      | Dynamic -> Env.Val exp
                      | Lexical -> Env.close exp env)
    | Let (var, e1, e2) -> eval' e2 (Env.extend env var (ref (eval' e1 env)))
    | Letrec (var, e1, e2) -> (match scope with
      | Dynamic -> let new_env = Env.extend env var (ref (Env.Val(Unassigned))) 
        in let new_definition = eval' e1 new_env in
        let env_extend = Env.extend new_env var (ref new_definition) in
        eval' e2 env_extend
      | Lexical -> let storage = ref (Env.Val Unassigned) in
            let new_definition = ref (eval' e1 (Env.extend env var storage)) in
            storage := !new_definition;
            eval' e2 (Env.extend env var new_definition))
    | App (e1, e2) -> (match scope with 
      | Dynamic -> (match eval' e1 env with
        | Env.Val Fun (var, e') -> eval' e' (Env.extend env var (ref (eval' e2 env)))
        | _ -> raise (EvalError "A non-function expression was provided"))
      | Lexical -> (match eval' e1 env with
        | Env.Closure (Fun (var, e'), env') -> eval' e' (Env.extend env' var (ref (eval' e2 env')))
        | _ -> raise (EvalError "A non-function expression was provided")))      
    | Raise -> raise EvalException                         
    | Unassigned -> raise (EvalError "Unassigned evaluation")            
  in eval' exp env ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

let eval_l (exp : expr) (env : Env.env) : Env.value =
  eval_e exp env Lexical ;;

(* Extension: Calling the DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator 
  using the new efficient EXTENDED evaluator *)

let eval_d_fresh (exp : expr) (env : Env.env) : Env.value =
  eval_e exp env Dynamic ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d_fresh ;;
